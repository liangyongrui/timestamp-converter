{"version":3,"sources":["utils.ts","Suggest.tsx","Storage.tsx","App.tsx","model.ts","serviceWorker.ts","index.tsx"],"names":["copy","x","copyDOM","document","querySelector","range","createRange","window","getSelection","removeAllRanges","selectNode","addRange","execCommand","notification","message","getSuggestItems","text","res","raw","Date","value","split","filter","t","now","length","s","getFullYear","d","isNaN","getTime","setHours","push","rawUt","parseInt","todayStart","todayEnd","thisMonthStart","setDate","date","year","month","getMonth","newDate","getMonthLast","map","columns","title","dataIndex","key","render","trim","replaceAll","type","className","onClick","action","all","size","href","Suggest","suggests","save","data","dateTime","toLocaleString","hour12","style","width","dataSource","pagination","top","remove","Storage","storageItems","storageKey","App","useState","inputValue","setInputValue","setStorageItems","suggestItems","setSuggestItems","n","set","Set","arr","add","forEach","tt","has","newSetArray","useEffect","a","json","localStorage","getItem","JSON","parse","items","setItem","stringify","placeholder","bordered","onChange","e","currentTarget","splice","findIndex","removeThenNewSetArray","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5bb1416a.chunk.js","sourcesContent":["import Item from \"./model\";\nimport { notification } from \"antd\";\n\nexport function removeThenNewSetArray(x: Item[], n: Item) {\n  const arr = [...x];\n  arr.splice(\n    arr.findIndex((t) => t.date.getTime() === n.date.getTime()),\n    1\n  );\n  return arr;\n}\n\nexport function newSetArray(x: Item[], n: Item) {\n  const set = new Set<number>();\n  const arr = [n];\n  set.add(n.date.getTime());\n  x.forEach((t) => {\n    const tt = t.date.getTime();\n    if (!set.has(tt)) {\n      set.add(tt);\n      arr.push(t);\n    }\n  });\n  return arr;\n}\n\nexport function copy(x: number | string) {\n  var copyDOM = document.querySelector(\".id\" + x);\n  if (copyDOM === null) {\n    notification[\"error\"]({\n      message: \"复制失败，请手动复制！\",\n    });\n    return;\n  }\n  var range = document.createRange(); //创建一个range\n  window.getSelection()?.removeAllRanges(); //清楚页面中已有的selection\n  range.selectNode(copyDOM); // 选中需要复制的节点\n  window.getSelection()?.addRange(range); // 执行选中元素\n  var successful = document.execCommand(\"copy\"); // 执行 copy 操作\n  if (successful) {\n    notification[\"success\"]({\n      message: \"复制成功\",\n    });\n  } else {\n    notification[\"error\"]({\n      message: \"复制失败，请手动复制！\",\n    });\n  }\n}\n","import \"./App.less\";\nimport React from \"react\";\nimport { Table, Space, Button } from \"antd\";\nimport Item from \"./model\";\nimport { copy } from \"./utils\";\n\nfunction getMonthLast(date: Date) {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 2;\n  if (month > 12) {\n    year += 1;\n    month = 1;\n  }\n  const newDate = new Date(year, month - 1, 1);\n  return new Date(newDate.getTime() - 1000 * 60 * 60 * 24);\n}\n\n/**\n * 获取建议日期\n */\nexport function getSuggestItems(text: string) {\n  const res = [];\n\n  const raw = new Date(text);\n  const value = text.split(\"\").filter((t) => t >= \"0\" && t <= \"9\");\n  const now = new Date();\n  if (value.length === 4) {\n    // 月 日\n    const s =\n      now.getFullYear() + \"-\" + value[0] + value[1] + \"-\" + value[2] + value[3];\n    const d = new Date(s);\n    if (!isNaN(d.getTime())) {\n      d.setHours(0, 0, 0, 0);\n      res.push(d);\n    }\n  }\n  if (isNaN(raw.getTime()) || raw.getTime() < 0) {\n    const value = text.split(\"\").filter((t) => t >= \"0\" && t <= \"9\");\n    if (value.length === 6) {\n      // 年月\n      const d = new Date(\n        value[0] + value[1] + value[2] + value[3] + \"-\" + value[4] + value[5]\n      );\n      if (!isNaN(d.getTime())) {\n        d.setHours(0, 0, 0, 0);\n        res.push(d);\n      }\n    }\n    if (value.length === 8) {\n      // 年月日\n      const s =\n        value[0] +\n        value[1] +\n        value[2] +\n        value[3] +\n        \"-\" +\n        value[4] +\n        value[5] +\n        \"-\" +\n        value[6] +\n        value[7];\n      const d = new Date(s);\n      if (!isNaN(d.getTime())) {\n        d.setHours(0, 0, 0, 0);\n        res.push(d);\n      }\n    }\n    if (value.length === 9) {\n      // 年 月 日 小时\n      const s =\n        value[0] +\n        value[1] +\n        value[2] +\n        value[3] +\n        \"-\" +\n        value[4] +\n        value[5] +\n        \"-\" +\n        value[6] +\n        value[7] +\n        \" 0\" +\n        value[8] +\n        \":00\";\n      const d = new Date(s);\n      if (!isNaN(d.getTime())) {\n        res.push(d);\n      }\n    }\n    if (value.length === 10) {\n      // 年 月 日 小时\n      const s =\n        value[0] +\n        value[1] +\n        value[2] +\n        value[3] +\n        \"-\" +\n        value[4] +\n        value[5] +\n        \"-\" +\n        value[6] +\n        value[7] +\n        \" \" +\n        value[8] +\n        value[9] +\n        \":00\";\n      const d = new Date(s);\n      if (!isNaN(d.getTime())) {\n        res.push(d);\n      }\n    }\n    if (value.length === 11) {\n      // 年 月 日 小时\n      const s =\n        value[0] +\n        value[1] +\n        value[2] +\n        value[3] +\n        \"-\" +\n        value[4] +\n        value[5] +\n        \"-\" +\n        value[6] +\n        value[7] +\n        \" \" +\n        value[8] +\n        value[9] +\n        \":0\" +\n        value[10];\n      const d = new Date(s);\n      if (!isNaN(d.getTime())) {\n        res.push(d);\n      }\n    }\n    if (value.length === 12) {\n      // 年 月 日 小时\n      const s =\n        value[0] +\n        value[1] +\n        value[2] +\n        value[3] +\n        \"-\" +\n        value[4] +\n        value[5] +\n        \"-\" +\n        value[6] +\n        value[7] +\n        \" \" +\n        value[8] +\n        value[9] +\n        \":\" +\n        value[10] +\n        value[11];\n      const d = new Date(s);\n      if (!isNaN(d.getTime())) {\n        res.push(d);\n      }\n    }\n  } else {\n    res.push(raw);\n  }\n  const rawUt = new Date(parseInt(text));\n  if (!isNaN(rawUt.getTime())) {\n    res.push(rawUt);\n  }\n  // 今天开始\n  const todayStart = new Date();\n  todayStart.setHours(0, 0, 0, 0);\n  res.push(todayStart);\n\n  // 今天结束\n  const todayEnd = new Date();\n  todayEnd.setHours(23, 59, 59, 999);\n  res.push(todayEnd);\n\n  // 本月开始\n  const thisMonthStart = new Date();\n  thisMonthStart.setDate(1);\n  thisMonthStart.setHours(0, 0, 0, 0);\n  res.push(thisMonthStart);\n\n  // 本月结束\n  res.push(getMonthLast(new Date()));\n\n  // now\n  res.push(new Date());\n\n  return res.map((t) => ({\n    date: t,\n  }));\n}\n\nconst columns = [\n  {\n    title: \"日期时间\",\n    dataIndex: \"dateTime\",\n    key: \"dateTime\",\n    render: (text: string) => {\n      const trim = text\n        .replaceAll(\" \", \"\")\n        .replaceAll(\":\", \"\")\n        .replaceAll(\"/\", \"\");\n      return (\n        <Button type=\"link\" className={`id${trim}`} onClick={() => copy(trim)}>\n          {text}\n        </Button>\n      );\n    },\n  },\n  {\n    title: \"时间戳\",\n    dataIndex: \"key\",\n    key: \"key\",\n    render: (text: number) => (\n      <Button type=\"link\" className={`id${text}`} onClick={() => copy(text)}>\n        {text}\n      </Button>\n    ),\n  },\n  {\n    title: \"Action\",\n    dataIndex: \"action\",\n    key: \"action\",\n    render: (action: (n: number) => void, all: any) => {\n      return (\n        <Space size=\"middle\">\n          <Button type=\"link\" href=\"#\" onClick={() => action(all.key)}>\n            保存\n          </Button>\n        </Space>\n      );\n    },\n  },\n];\n\nexport default function Suggest({\n  suggests,\n  save,\n}: {\n  suggests: Item[];\n  save: (n: number) => void;\n}) {\n  const data = suggests\n    .map((t) => t.date)\n    .map((t) => ({\n      key: t.getTime(),\n      dateTime: t.toLocaleString(\"chinese\", { hour12: false }),\n      action: save,\n    }));\n  return (\n    <Table\n      style={{ width: \"1000px\" }}\n      columns={columns as any}\n      dataSource={data}\n      pagination={false}\n    />\n  );\n}\n","import \"./App.less\";\nimport React from \"react\";\nimport { Table, Space, Button } from \"antd\";\nimport Item from \"./model\";\nimport { copy } from \"./utils\";\n\nconst columns = [\n  {\n    title: \"日期时间\",\n    dataIndex: \"dateTime\",\n    key: \"dateTime\",\n    render: (text: string) => {\n      const trim = text\n        .replaceAll(\" \", \"\")\n        .replaceAll(\":\", \"\")\n        .replaceAll(\"/\", \"\");\n      return (\n        <Button type=\"link\" className={`id${trim}`} onClick={() => copy(trim)}>\n          {text}\n        </Button>\n      );\n    },\n  },\n  {\n    title: \"时间戳\",\n    dataIndex: \"key\",\n    key: \"key\",\n    render: (text: number) => (\n      <Button type=\"link\" className={`id${text}`} onClick={() => copy(text)}>\n        {text}\n      </Button>\n    ),\n  },\n  {\n    title: \"Action\",\n    key: \"action\",\n    dataIndex: \"action\",\n    render: (\n      {\n        top,\n        remove,\n      }: { top: (n: number) => void; remove: (n: number) => void },\n      all: any\n    ) => (\n      <Space size=\"middle\">\n        <Button type=\"link\" onClick={() => top(all.key)}>\n          置顶\n        </Button>\n        <Button type=\"link\" onClick={() => remove(all.key)}>\n          删除\n        </Button>\n      </Space>\n    ),\n  },\n];\n\nfunction Storage({\n  storageItems,\n  top,\n  remove,\n}: {\n  storageItems: Item[];\n  top: (n: number) => void;\n  remove: (n: number) => void;\n}) {\n  const data = storageItems\n    .map((t) => t.date)\n    .map((t) => ({\n      key: t.getTime(),\n      dateTime: t.toLocaleString(\"chinese\", { hour12: false }),\n      action: { top, remove },\n    }));\n  return (\n    <Table\n      style={{ width: \"1000px\" }}\n      columns={columns as any}\n      dataSource={data}\n      pagination={false}\n    />\n  );\n}\n\nexport default Storage;\n","import \"./App.less\";\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, Input } from \"antd\";\nimport Item, { parseItems, stringifyItems } from \"./model\";\nimport Suggest, { getSuggestItems } from \"./Suggest\";\nimport UtStorage from \"./Storage\";\nimport { newSetArray, removeThenNewSetArray } from \"./utils\";\n\nconst storageKey = \"the_world's_best_time-stamp_conversion_website_key\";\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  /// 浏览器（将要）储存的数据\n  const [storageItems, setStorageItems] = useState<Item[]>([]);\n  /// 建议需要给出的数据\n  const [suggestItems, setSuggestItems] = useState<Item[]>([]);\n\n  useEffect(() => {\n    (async function () {\n      setSuggestItems(getSuggestItems(inputValue));\n    })();\n  }, [inputValue]);\n\n  useEffect(() => {\n    setStorageItems(parseItems(localStorage.getItem(storageKey) ?? \"[]\"));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(storageKey, stringifyItems(storageItems));\n  }, [storageItems]);\n\n  function save(n: number) {\n    setStorageItems((x) => {\n      return newSetArray(x, { date: new Date(n) });\n    });\n  }\n\n  function remove(n: number) {\n    setStorageItems((x) => {\n      return removeThenNewSetArray(x, { date: new Date(n) });\n    });\n  }\n  return (\n    <div className=\"App\">\n      <p>这有可能是世界上最好用的 时间戳 转换网站</p>\n      <Divider />\n      <Input\n        size=\"large\"\n        style={{ width: \"1000px\" }}\n        placeholder=\"在这输入你想要输入的内容，无需拘泥于格式\"\n        bordered={false}\n        value={inputValue}\n        onChange={(e) => setInputValue(e.currentTarget.value)}\n      />\n      <Divider />\n      <p>猜你想要</p>\n      <Suggest save={save} suggests={suggestItems} />\n      <Divider />\n      <p>Storage</p>\n      <UtStorage top={save} remove={remove} storageItems={storageItems} />\n    </div>\n  );\n}\n\nexport default App;\n","interface Item {\n  date: Date;\n}\n\nexport function stringifyItems(items: Item[]) {\n  return JSON.stringify(items.map((t) => t.date.getTime()));\n}\n\nexport function parseItems(json: string) {\n  return (JSON.parse(json) as number[]).map((t) => ({\n    date: new Date(t),\n  }));\n}\nexport default Item;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}